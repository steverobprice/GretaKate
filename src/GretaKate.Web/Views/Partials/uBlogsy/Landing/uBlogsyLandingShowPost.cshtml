@*
    Shows post for landing. This is almost identical to /Post/uBlogsyPostShowPost.cshtml but gives you the option to customise it individually.
*@

@using uBlogsy.BusinessLogic
@inherits UmbracoTemplatePage
@{
    // image settings
    const string defaultImage = "http://placekitten.com/300/200/"; // change this if want a default image. eg "http://placekitten.com/300/200/", else make it null (no "")
    const int imageHieght = -1; // -1 if no height specified
    const int imageWidth = 300;
    
    var node = (IPublishedContent)ViewData["Node"];

    var url = Request.QueryString.Count == 0 ? node.Url() : string.Format("{0}?{1}", node.Url(), Request.QueryString);
    
    @ShowPost(node, url, imageHieght, imageWidth, defaultImage)
}



@helper ShowPost(IPublishedContent node, string url, int imageHieght, int imageWidth, string defaultImage)
{
    <div class="blog-article">
        <h2>
            <a href="@url" title="@node.GetPropertyValue("uBlogsyContentTitle")">
                @node.GetPropertyValue("uBlogsyContentTitle")
            </a>
        </h2>

        <div class="post-image">
            @RenderPostImage(node, imageHieght, imageWidth, defaultImage)
        </div>

        <div class="post-body">
            @RenderPostBody(node)
        </div>

        <p>
            Posted on @(node.GetPropertyValue<DateTime>("uBlogsyPostDate").ToString("d MMMM yyyy"))
            @Html.Partial("uBlogsy/Post/uBlogsyPostListAuthors", ViewData)
            and tagged @Html.Partial("uBlogsy/Post/uBlogsyPostListTags", new ViewDataDictionary(ViewData) { { "ShowCount", true }, { "ShowLabel", false } })
        </p>
    </div>
}






@helper RenderPostBody(IPublishedContent d)
{
    var useSummary = DataService.Instance.GetValueFromLanding(d, "uBlogsyGeneralUseSummary");
    
    if (useSummary == "True")
    {
        @Html.Raw(d.GetPropertyValue("uBlogsyContentSummary"))
    }
    else
    {
        @Html.Raw(library.RenderMacroContent(d.GetPropertyValue<string>("uBlogsyContentBody"), d.Id))
    } 
}





@helper RenderPostImage(IPublishedContent node, int imageHieght, int imageWidth, string defaultImage)
{
    var imageId = node.GetPropertyValue<string>("uBlogsyPostImage");

    if (string.IsNullOrWhiteSpace(imageId) && string.IsNullOrWhiteSpace(defaultImage))
    {
        // no property or default so do nothing
        return;
    }

    //var imageData = new Dictionary<string, object>()
    //{
    //    {"Alias", "uBlogsyPostImage"},
    //    {"Suffix", ""},
    //    {"Height", imageHieght},
    //    {"Width", imageWidth},
    //    {"CssClass", "uBlogsy_post_image"},
    //    {"Title", "Main Image"},
    //    {"Map", string.Empty },
    //    {"DefaultImage", defaultImage},
    //    {"Node", node}
    //};

    var imageData = new Dictionary<string, object>()
    {
        {"Alias", "uBlogsyPostImage"},
        {"Suffix", ""},
        {"Height", -1},
        {"Width", -1},
        {"CssClass", "full-width"},
        {"Title", "Main Image"},
        {"Map", string.Empty },
        {"DefaultImage", defaultImage},
        {"Node", node}
    };
                 
    <a href="@node.Url" title="Post image">
        @Html.Partial("~/Views/Partials/uBlogsy/Shared/uBlogsyShowImage.cshtml", imageData)     
    </a>
 }
